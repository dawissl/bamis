/* Drop Tables */

begin
	EXECUTE IMMEDIATE 'DROP TABLE   Jizda CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   KategorieStavu CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   Kategoriezamestnancu CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   Kategoriezasilky CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   Lokace CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   Region CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   Sklad CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   Stav CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   TRASA CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   VOZIDLA CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   ZAKAZNIK CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   ZAMESTNANEC CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


begin
	EXECUTE IMMEDIATE 'DROP TABLE   ZASILKA CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;  


/* Create Tables */

CREATE TABLE  Jizda
(
	JIZDAID NUMBER(8) NOT NULL,
	VozidlaID NUMBER(8) NULL,
	ZamestnanecID NUMBER(8) NULL,
	StavID NUMBER(3) NULL
)
;

CREATE TABLE  KategorieStavu
(
	STAV VARCHAR2(15) NOT NULL,
	KATEGORIESTAVU NUMBER(2) NOT NULL
)
;

CREATE TABLE  Kategoriezamestnancu
(
	Kategorie VARCHAR2(10) NOT NULL,
	KategoriezamestnancuID NUMBER(2) NOT NULL
)
;

CREATE TABLE  Kategoriezasilky
(
	Kategorie VARCHAR2(15) NOT NULL,
	KategoriezasilkyID NUMBER(2) NOT NULL
)
;

CREATE TABLE  Lokace
(
	Adresa VARCHAR(30) NOT NULL,
	Nazev VARCHAR2(15) NULL,
	LokaceID NUMBER(8) NOT NULL,
	RegionID NUMBER(3) NULL
)
;

CREATE TABLE  Region
(
	Region VARCHAR2(20) NOT NULL,
	RegionID NUMBER(3) NOT NULL,
	SkladID NUMBER(8) NULL
)
;

CREATE TABLE  Sklad
(
	Adresa VARCHAR2(30) NULL,
	Kapacita NUMBER(8) NOT NULL,
	SkladID NUMBER(8) NOT NULL,
	ZamestnanecID NUMBER(8) NULL,
	VozidlaID NUMBER(8) NULL
)
;

CREATE TABLE  Stav
(
	Datum DATE NOT NULL,
	LokaceID NUMBER(8) NOT NULL,
	StavID NUMBER(8) NOT NULL,
	ZamestnanecID NUMBER(8) NULL,
	ZasilkaID NUMBER(10) NOT NULL,
	KATEGORIESTAVU NUMBER(2) NOT NULL,
	JIZDAID NUMBER(8) NULL
)
;

CREATE TABLE  Trasa
(
	TrasaID NUMBER(8) NOT NULL,
	LokaceID NUMBER(8) NULL,
	VozidlaID NUMBER(8) NULL
)
;

CREATE TABLE  Vozidla
(
	Najetekm NUMBER(8) NOT NULL,
	Nalozenost CHAR(1) NOT NULL,
	Spz VARCHAR2(7) NOT NULL,
	VozidlaID NUMBER(8) NOT NULL
)
;

CREATE TABLE  Zakaznik
(
	Jmeno VARCHAR2(20) NOT NULL,
	Mail VARCHAR2(30) NOT NULL,
	Predplatitel CHAR(1) NOT NULL,
	Prijmeni VARCHAR2(20) NOT NULL,
	Telefon VARCHAR2(13) NOT NULL,
	ZakaznikID NUMBER(8) NOT NULL,
	LokaceID NUMBER(8) NULL
)
;

CREATE TABLE  Zamestnanec
(
	Jmeno VARCHAR2(15) NOT NULL,
	Mail VARCHAR2(30) NOT NULL,
	Plat NUMBER(8,2) NOT NULL,
	Prijmeni VARCHAR2(15) NOT NULL,
	Rodnecislo VARCHAR2(11) NOT NULL,
	Telefon VARCHAR2(13) NOT NULL,
	ZamestnanecID NUMBER(8) NOT NULL,
	KategoriezamestnancuID NUMBER(2) NULL
)
;

CREATE TABLE  Zasilka
(
	Vaha NUMBER(6,2) NULL,
	ZasilkaID NUMBER(10) NOT NULL,
	KategoriezasilkyID NUMBER(2) NULL,
	SkladID NUMBER(8) NULL,
	ZakaznikID NUMBER(8) NULL
)
;

/* Create Comments, Sequences and Triggers for Autonumber Columns */

DROP SEQUENCE SEQ_Jizda_JIZDAID;

CREATE SEQUENCE SEQ_Jizda_JIZDAID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;
/
CREATE OR REPLACE TRIGGER TRG_Jizda_JIZDAID 
	BEFORE INSERT 
	ON Jizda 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Jizda_JIZDAID.NEXTVAL 
		INTO :NEW.JIZDAID 
		FROM DUAL; 
	END;

/
DROP SEQUENCE SEQ_KatSta_KATEGORIESTAVU;

CREATE SEQUENCE SEQ_KatStavu_KATEGORIESTAVU 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;
/
CREATE OR REPLACE TRIGGER TRG_KatSta_KatSta 
	BEFORE INSERT 
	ON KategorieStavu 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_KatSta_KATSTA.NEXTVAL 
		INTO :NEW.KATEGORIESTAVU 
		FROM DUAL; 
	END;

/
DROP SEQUENCE SEQ_KatZam_KatZamID;

CREATE SEQUENCE SEQ_KatZam_KatZamID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;
/
CREATE OR REPLACE TRIGGER TRG_KatZam_KatZamID 
	BEFORE INSERT 
	ON Kategoriezamestnancu 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_KatZam_KatZamID.NEXTVAL 
		INTO :NEW.KategoriezamestnancuID 
		FROM DUAL; 
	END;


DROP SEQUENCE SEQ_KateZas_KatZasID;

CREATE SEQUENCE SEQ_KateZas_KatZasID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;
/
CREATE OR REPLACE TRIGGER TRG_KatZas_KateZasID 
	BEFORE INSERT 
	ON Kategoriezasilky 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_KateZas_KatZasID.NEXTVAL 
		INTO :NEW.KategoriezasilkyID 
		FROM DUAL; 
	END;

/
DROP SEQUENCE SEQ_Lokace_LokaceID;

CREATE SEQUENCE SEQ_Lokace_LokaceID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;

/

CREATE OR REPLACE TRIGGER TRG_Lokace_LokaceID 
	BEFORE INSERT 
	ON Lokace 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Lokace_LokaceID.NEXTVAL 
		INTO :NEW.LokaceID 
		FROM DUAL; 
	END;

/
DROP SEQUENCE SEQ_Region_RegionID;

CREATE SEQUENCE SEQ_Region_RegionID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;

/

CREATE OR REPLACE TRIGGER TRG_Region_RegionID 
	BEFORE INSERT 
	ON Region 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Region_RegionID.NEXTVAL 
		INTO :NEW.RegionID 
		FROM DUAL; 
	END;

/

DROP SEQUENCE SEQ_Sklad_SkladID;

CREATE SEQUENCE SEQ_Sklad_SkladID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;
/

CREATE OR REPLACE TRIGGER TRG_Sklad_SkladID 
	BEFORE INSERT 
	ON Sklad 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Sklad_SkladID.NEXTVAL 
		INTO :NEW.SkladID 
		FROM DUAL; 
	END;
/

DROP SEQUENCE SEQ_Stav_StavID;

CREATE SEQUENCE SEQ_Stav_StavID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;
/

CREATE OR REPLACE TRIGGER TRG_Stav_StavID 
	BEFORE INSERT 
	ON Stav 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Stav_StavID.NEXTVAL 
		INTO :NEW.StavID 
		FROM DUAL; 
	END;

/

DROP SEQUENCE SEQ_Trasa_TrasaID;

CREATE SEQUENCE SEQ_Trasa_TrasaID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;
/

CREATE OR REPLACE TRIGGER TRG_Trasa_TrasaID 
	BEFORE INSERT 
	ON Trasa 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Trasa_TrasaID.NEXTVAL 
		INTO :NEW.TrasaID 
		FROM DUAL; 
	END;
/

DROP SEQUENCE SEQ_Vozidla_VozidlaID;

CREATE SEQUENCE SEQ_Vozidla_VozidlaID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;

/
CREATE OR REPLACE TRIGGER TRG_Vozidla_VozidlaID 
	BEFORE INSERT 
	ON Vozidla 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Vozidla_VozidlaID.NEXTVAL 
		INTO :NEW.VozidlaID 
		FROM DUAL; 
	END;
/

DROP SEQUENCE SEQ_Zakaznik_ZakaznikID;

CREATE SEQUENCE SEQ_Zakaznik_ZakaznikID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;

/

CREATE OR REPLACE TRIGGER TRG_Zakaznik_ZakaznikID 
	BEFORE INSERT 
	ON Zakaznik 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Zakaznik_ZakaznikID.NEXTVAL 
		INTO :NEW.ZakaznikID 
		FROM DUAL; 
	END;
/

DROP SEQUENCE SEQ_Zamestnanec_ZamestnanecID;

CREATE SEQUENCE SEQ_Zamestnanec_ZamestnanecID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;
/

CREATE OR REPLACE TRIGGER TRG_Zamestnanec_ZamestnanecID 
	BEFORE INSERT 
	ON Zamestnanec 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Zamestnanec_ZamestnanecID.NEXTVAL 
		INTO :NEW.ZamestnanecID 
		FROM DUAL; 
	END;

/

DROP SEQUENCE SEQ_Zasilka_ZasilkaID;

CREATE SEQUENCE SEQ_Zasilka_ZasilkaID 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;

/

CREATE OR REPLACE TRIGGER TRG_Zasilka_ZasilkaID 
	BEFORE INSERT 
	ON Zasilka 
	FOR EACH ROW 
	BEGIN 
		SELECT SEQ_Zasilka_ZasilkaID.NEXTVAL 
		INTO :NEW.ZasilkaID 
		FROM DUAL; 
	END;

/

CREATE OR REPLACE VIEW PACKAGE_DETAILS AS
SELECT ZAKAZNIK.ZAKAZNIKID, ZAKAZNIK.JMENO, ZAKAZNIK.PRIJMENI, ZAKAZNIK.TELEFON, ZASILKA.VAHA
FROM ZAKAZNIK
RIGHT JOIN ZASILKA ON ZAKAZNIK.ZAKAZNIKID=ZASILKA.ZAKAZNIKID;
/

CREATE OR REPLACE VIEW nalozena_auta AS
SELECT SPZ, NALOZENOST
FROM VOZIDLO
WHERE NALOZENOST="1";
/

CREATE OR REPLACE VIEW pridelene_balicky AS
SELECT ZAMESTNANEC.ZAMESTNANECID, ZAMESTNANEC.JMENO, ZAMESTNANAEC.PRIJMENI, ZAMESTNANAEC.TELEFON, ZASILKA.ZASILKAID
FROM STAV
JOIN STAV ON ZAMESTNANEC.ZAMESTNANECID=STAV.ZAMESTNANECID
JOIN STAV ON ZASILKA.ZASILKAID=STAV.ZASILKAID
/


/* Create Primary Keys, Indexes, Uniques, Checks, Triggers */

ALTER TABLE  Jizda 
 ADD CONSTRAINT PK_Jizda
	PRIMARY KEY (JIZDAID) 
 USING INDEX
;

CREATE INDEX IXFK_JIZ_VOZ   
 ON  Jizda (VozidlaID) 
;

CREATE INDEX IXFK_JIZ_ZAM   
 ON  Jizda (ZamestnanecID) 
;

ALTER TABLE  KategorieStavu 
 ADD CONSTRAINT PK_KATEGORIESTAVU
	PRIMARY KEY (KATEGORIESTAVU) 
 USING INDEX
;

ALTER TABLE  Kategoriezamestnancu 
 ADD CONSTRAINT PK_KATEGORIEZAM
	PRIMARY KEY (KategoriezamestnancuID) 
 USING INDEX
;

ALTER TABLE  Kategoriezasilky 
 ADD CONSTRAINT PK_KATEGORIEZAS
	PRIMARY KEY (KategoriezasilkyID) 
 USING INDEX
;

ALTER TABLE  Lokace 
 ADD CONSTRAINT PK_Lokace
	PRIMARY KEY (LokaceID) 
 USING INDEX
;

CREATE INDEX IXFK_LOK_REG   
 ON  Lokace (RegionID) 
;

ALTER TABLE  Region 
 ADD CONSTRAINT PK_Region
	PRIMARY KEY (RegionID) 
 USING INDEX
;

CREATE INDEX IXFK_REG_SKL   
 ON  Region (SkladID) 
;

ALTER TABLE  Sklad 
 ADD CONSTRAINT PK_Sklad
	PRIMARY KEY (SkladID) 
 USING INDEX
;

CREATE INDEX IXFK_SKL_VOZ   
 ON  Sklad (VozidlaID) 
;

CREATE INDEX IXFK_SKL_ZAM   
 ON  Sklad (ZamestnanecID) 
;

ALTER TABLE  Stav 
 ADD CONSTRAINT PK_Stav
	PRIMARY KEY (StavID) 
 USING INDEX
;

CREATE INDEX IXFK_STA_JIZ   
 ON  Stav (JIZDAID) 
;

CREATE INDEX IXFK_STA_KATS   
 ON  Stav (KATEGORIESTAVU) 
;

CREATE INDEX IXFK_STA_LOK   
 ON  Stav (LokaceID) 
;

CREATE INDEX IXFK_STA_ZAM   
 ON  Stav (ZamestnanecID) 
;

CREATE INDEX IXFK_STA_ZAS   
 ON  Stav (ZasilkaID) 
;

ALTER TABLE  Trasa 
 ADD CONSTRAINT PK_Trasa
	PRIMARY KEY (TrasaID) 
 USING INDEX
;

CREATE INDEX IXFK_TRA_LOK   
 ON  Trasa (LokaceID) 
;

CREATE INDEX IXFK_TRA_VOZ   
 ON  Trasa (VozidlaID) 
;

ALTER TABLE  Vozidla 
 ADD CONSTRAINT PK_Vozidla
	PRIMARY KEY (VozidlaID) 
 USING INDEX
;

ALTER TABLE  Zakaznik 
 ADD CONSTRAINT PK_Zakaznik
	PRIMARY KEY (ZakaznikID) 
 USING INDEX
;

CREATE INDEX IXFK_ZAK_LOK   
 ON  Zakaznik (LokaceID) 
;

ALTER TABLE  Zamestnanec 
 ADD CONSTRAINT PK_Zamestnanec
	PRIMARY KEY (ZamestnanecID) 
 USING INDEX
;

CREATE INDEX IXFK_ZAM_KATZ   
 ON  Zamestnanec (KategoriezamestnancuID) 
;

ALTER TABLE  Zasilka 
 ADD CONSTRAINT PK_Zasilka
	PRIMARY KEY (ZasilkaID) 
 USING INDEX
;

CREATE INDEX IXFK_ZAS_KATZ   
 ON  Zasilka (KategoriezasilkyID) 
;

CREATE INDEX IXFK_ZAS_SKL   
 ON  Zasilka (SkladID) 
;

CREATE INDEX IXFK_ZAS_ZAK   
 ON  Zasilka (ZakaznikID) 
;

/* Create Foreign Key Constraints */

ALTER TABLE  Jizda 
 ADD CONSTRAINT FK_JIZ_VOZ
	FOREIGN KEY (VozidlaID) REFERENCES  Vozidla (VozidlaID)
;

ALTER TABLE  Lokace 
 ADD CONSTRAINT FK_LOK_REG
	FOREIGN KEY (RegionID) REFERENCES  Region (RegionID)
;

ALTER TABLE  Region 
 ADD CONSTRAINT FK_REG_SKL
	FOREIGN KEY (SkladID) REFERENCES  Sklad (SkladID)
;

ALTER TABLE  Sklad 
 ADD CONSTRAINT FK_SKL_ZAM
	FOREIGN KEY (ZamestnanecID) REFERENCES  Zamestnanec (ZamestnanecID)
;

ALTER TABLE  Sklad 
 ADD CONSTRAINT FK_SKL_VOZ
	FOREIGN KEY (VozidlaID) REFERENCES  Vozidla (VozidlaID)
;

ALTER TABLE  Stav 
 ADD CONSTRAINT FK_STA_JIZ
	FOREIGN KEY (JIZDAID) REFERENCES  Jizda (JIZDAID)
;

ALTER TABLE  Stav 
 ADD CONSTRAINT FK_STA_KATS
	FOREIGN KEY (KATEGORIESTAVU) REFERENCES  KategorieStavu (KATEGORIESTAVU)
;

ALTER TABLE  Stav 
 ADD CONSTRAINT FK_STA_LOK
	FOREIGN KEY (LokaceID) REFERENCES  Lokace (LokaceID)
;

ALTER TABLE  Stav 
 ADD CONSTRAINT FK_STA_ZAS
	FOREIGN KEY (ZasilkaID) REFERENCES  Zasilka (ZasilkaID)
;

ALTER TABLE  Trasa 
 ADD CONSTRAINT FK_TRA_VOZ
	FOREIGN KEY (VozidlaID) REFERENCES  Vozidla (VozidlaID)
;

ALTER TABLE  Trasa 
 ADD CONSTRAINT FK_TRA_LOK
	FOREIGN KEY (LokaceID) REFERENCES  Lokace (LokaceID)
;

ALTER TABLE  Zakaznik 
 ADD CONSTRAINT FK_ZAK_LOK
	FOREIGN KEY (LokaceID) REFERENCES  Lokace (LokaceID)
;

ALTER TABLE  Zamestnanec 
 ADD CONSTRAINT FK_ZAM_KATZ
	FOREIGN KEY (KategoriezamestnancuID) REFERENCES  Kategoriezamestnancu (KategoriezamestnancuID)
;

ALTER TABLE  Zasilka 
 ADD CONSTRAINT FK_ZAS_KATZ
	FOREIGN KEY (KategoriezasilkyID) REFERENCES  Kategoriezasilky (KategoriezasilkyID)
;

ALTER TABLE  Zasilka 
 ADD CONSTRAINT FK_ZAS_SKL
	FOREIGN KEY (SkladID) REFERENCES  Sklad (SkladID)
;

ALTER TABLE  Zasilka 
 ADD CONSTRAINT FK_ZAS_ZAK
	FOREIGN KEY (ZakaznikID) REFERENCES  Zakaznik (ZakaznikID)
;


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Jizda_JIZDAID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Jizda_JIZDAID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Jizda_JIZDAID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Jizda_JIZDAID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_KategorieStavu_KATEGORIESTAVU'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_KategorieStavu_KATEGORIESTAVU'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_KategorieStavu_KATEGORIESTAVU'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_KategorieStavu_KATEGORIESTAVU'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Kategoriezamestnancu_KategoriezamestnancuID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Kategoriezamestnancu_KategoriezamestnancuID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Kategoriezamestnancu_KategoriezamestnancuID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_KatZam_KatZamID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Kategoriezasilky_KategoriezasilkyID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Kategoriezasilky_KategoriezasilkyID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_KateZas_KatZasID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_KateZas_KatZasID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Lokace_LokaceID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Lokace_LokaceID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Lokace_LokaceID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Lokace_LokaceID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Region_RegionID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Region_RegionID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Region_RegionID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Region_RegionID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Sklad_SkladID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Sklad_SkladID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Sklad_SkladID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Sklad_SkladID'; 
END IF; 
END; 



DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Stav_StavID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Stav_StavID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Stav_StavID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Stav_StavID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Trasa_TrasaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Trasa_TrasaID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Trasa_TrasaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Trasa_TrasaID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Vozidla_VozidlaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Vozidla_VozidlaID'; 
END IF; 
END; 



DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Vozidla_VozidlaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Vozidla_VozidlaID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Zakaznik_ZakaznikID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Zakaznik_ZakaznikID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Zakaznik_ZakaznikID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Zakaznik_ZakaznikID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Zamestnanec_ZamestnanecID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Zamestnanec_ZamestnanecID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Zamestnanec_ZamestnanecID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Zamestnanec_ZamestnanecID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_TRIGGERS 
  WHERE OWNER = '' 
  AND TRIGGER_NAME = 'TRG_Zasilka_ZasilkaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER TRG_Zasilka_ZasilkaID'; 
END IF; 
END; 

/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM ALL_SEQUENCES 
  WHERE SEQUENCE_OWNER = '' 
  AND SEQUENCE_NAME = 'SEQ_Zasilka_ZasilkaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_Zasilka_ZasilkaID'; 
END IF; 
END; 

/